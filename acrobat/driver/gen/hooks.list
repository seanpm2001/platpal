void AVDocWillOpenFromFile(ASPathName fileName, ASFileSys fileSys, void *clientData)
void AVDocDidOpen(AVDoc doc, ASInt32 error, void *clientData)
void AVDocDidActivate(AVDoc doc, void *clientData)
void AVDocDidDeactivate(AVDoc doc, void *clientData)
void AVDocWillClose(AVDoc doc, void *clientData)
void AVDocDidClose(AVDoc doc, void *clientData)
void AVDocWillClearSelection(AVDoc doc, ASAtom selType, void* selData, void *clientData)
void AVDocDidSetSelection(AVDoc doc, ASAtom selType, void* selData, void *clientData)
void AVDocWillPerformAction(AVDoc doc, PDAction action, void* clientData)
void AVDocDidPerformAction(AVDoc doc, PDAction action, ASInt32 err, void* clientData)
void AVPageViewDidDraw(AVPageView pageView, void *clientData)
void AVPageViewDidChange(AVPageView pageView, ASInt16 how, void *clientData)
void PDDocWillInsertPages(PDDoc doc, ASInt32 insertAfterThisPage, PDDoc srcDoc, ASInt32 srcFromPage, ASInt32 srcToPage, void *clientData)
void PDDocDidInsertPages(PDDoc doc, ASInt32 insertAfterThisPage, PDDoc srcDoc, ASInt32 srcFromPage, ASInt32 srcToPage, ASInt32 error, void *clientData)
void PDDocWillReplacePages(PDDoc doc, ASInt32 fromPage, ASInt32 toPage, PDDoc srcDoc, ASInt32 srcFromPage, ASInt32 srcToPage, void *clientData)
void PDDocDidReplacePages(PDDoc doc, ASInt32 fromPage, ASInt32 toPage, PDDoc srcDoc, ASInt32 srcFromPage, ASInt32 srcToPage, ASInt32 error, void *clientData)
void PDDocWillMovePages(PDDoc doc, ASInt32 moveAfterThisPage, ASInt32 fromPage, ASInt32 toPage, void *clientData)
void PDDocDidMovePages(PDDoc doc, ASInt32 moveAfterThisPage, ASInt32 fromPage, ASInt32 toPage, ASInt32 error, void *clientData)
void PDDocWillDeletePages(PDDoc doc, ASInt32 fromPage, ASInt32 toPage, void *clientData)
void PDDocDidDeletePages(PDDoc doc, ASInt32 fromPage, ASInt32 toPage, ASInt32 error, void *clientData)
void PDDocWillChangePages(PDDoc doc, PDOperation op, ASInt32 fromPage, ASInt32 toPage, void *clientData)
void PDDocDidChangePages(PDDoc doc, PDOperation op, ASInt32 fromPage, ASInt32 toPage, ASInt32 error, void *clientData)
void PDDocDidChangeThumbs(PDDoc doc, void *clientData)
void PDDocWillPrintPages(PDDoc doc, ASInt32 fromPage, ASInt32 toPage, ASInt32 psLevel, ASBool binaryOK, void *clientData)
void PDDocDidPrintPages(PDDoc doc, ASInt32 fromPage, ASInt32 toPage, ASInt32 error, void *clientData)
void PDDocWillPrintPage(PDDoc doc, ASInt32 page, ASStm stm, void *clientData)
void PDDocDidPrintPage(PDDoc doc, ASInt32 page, ASStm stm, ASInt32 error, void *clientData)
void PDDocDidAddThread(PDDoc doc, PDThread thread, void* clientData)
void PDDocDidRemoveThread(PDDoc doc, ASInt32 index, void* clientData)
void PDDocWillSave(PDDoc doc, void* clientData)
void PDDocDidSave(PDDoc doc, ASInt32 err, void* clientData)
void PDPageContentsDidChange(PDPage page, void *clientData)
void PDPageWillAddAnnot(PDPage page, ASInt32 addAfter, PDAnnot annot, void *clientData)
void PDPageDidAddAnnot(PDPage page, PDAnnot annot, ASInt32 error, void *clientData)
void PDPageWillRemoveAnnot(PDPage page, ASInt32 annotIndex, void *clientData)
void PDPageDidRemoveAnnot(PDPage page, ASInt32 annotIndex, ASInt32 error, void *clientData)
void PDAnnotWasCreated(PDAnnot annot, PDPage page, void *clientData)
void PDAnnotWillChange(PDAnnot annot, ASAtom key, void* clientData)
void PDAnnotDidChange(PDAnnot annot, ASAtom key, ASInt32 error, void* clientData)
void PDThreadDidChange(PDThread thread, void* clientData)
void PDBookmarkWasCreated(PDBookmark bookmark, void *clientData)
void PDBookmarkDidChangePosition(PDBookmark bookmark, void* clientData)
void PDBookmarkWillChange(PDBookmark bookmark, ASAtom key, void* clientData)
void PDBookmarkDidChange(PDBookmark bookmark, ASAtom key, ASInt32 err, void* clientData)
void PDBookmarkWillDestroy(PDBookmark bookmark, void* clientData)
void PDBookmarkDidDestroy(PDBookmark bookmark, ASInt32 err, void* clientData)
void PDDocWillRemoveThread(PDDoc doc, ASInt32 index, void* clientData)
void PDPageContentsDidChangeEx(PDPage page, ASBool invalidateViews, void *clientData)
void AVDocWillOpenFromPDDoc(PDDoc pdDoc, void* clientData)
void AVDocDidAddToSelection(AVDoc doc, ASAtom selType, void* selData, void* addData, void *clientData)
void AVDocDidRemoveFromSelection(AVDoc doc, ASAtom selType, void* selData, void* remData, void *clientData)
void AVDocWantsToDie(AVDoc doc, void* clientData)
void PDDocWillPrintDoc(PDDoc doc, ASStm stm, ASInt32 psLevel, void *clientData)
void PDDocWillSaveEx(PDDoc doc, PDDocSaveParams params, void* clientData)
void AVDocWillPrint(AVDoc doc, void* clientData)
void AVDocDidPrint(AVDoc doc, void* clientData)
void PDDocWillClose(PDDoc doc, void *clientData)
void PDDocPageLabelDidChange(PDDoc doc, ASInt32 firstPage, ASInt32 lastPage, void *clientData)
void PDDocWillExportAnnots(PDDoc doc, void* clientData)
void PDDocWillImportAnnots(PDDoc doc, void* clientData)
void PDDocDidExportAnnots(PDDoc doc, void* clientData)
void PSPrintAfterBeginProlog(PDDoc doc, ASStm stm, void *clientData)
void PSPrintAfterBeginSetup(PDDoc doc, ASStm stm, void *clientData)
void PSPrintBeforeEndSetup(PDDoc doc, ASStm stm, void *clientData)
void PSPrintAfterBeginPageSetup(PDDoc doc, ASInt32 page, ASStm stm, void *clientData)
void PSPrintAfterPageTrailer(PDDoc doc, ASInt32 page, ASStm stm, void *clientData)
void PSPrintAfterTrailer(PDDoc doc, ASStm stm, void *clientData)
void PSPrintBeforeEndComments(PDDoc doc,  ASStm stm, void *clientData)
void PSPrintAfterEmitExtGState(ASStm stm, void *clientData)
void AVDocDidClickName(AVDoc doc, CosObj NameObj, void* clientData)
void PDDocDidImportAnnots(PDDoc doc, void* clientData)
void PDNameTreeNameAdded(PDNameTree NameTree, CosObj Key, CosObj Value, void* clientData)
void PDNameTreeNameRemoved(PDNameTree NameTree, CosObj Key, void* clientData)
void PDDocDidClose(PDDoc doc, void *clientData)
void PDDocDidInsertPagesEx(PDDocInsertPagesParams params, void* clientData)
void PDDocWillInsertPagesEx(PDDocInsertPagesParams params, void* clientData)
void PDNumTreeNumAdded(PDNumTree numTree, ASInt32 key, CosObj value, void* clientData)
void PDNumTreeNumRemoved(PDNumTree numTree, ASInt32 key, void* clientData)
void PDBookmarkDidUnlink(PDBookmark bookmark, void* clientData)
void AVDocDidDeleteSelection(AVDoc doc, ASAtom selType, void* selData, void *clientData)
void PDDocWillPrintTiledPage(PDDoc doc, ASInt32 page, ASStm stm, ASInt32 whichTile, ASInt32 numTiles, ASFixedRect *cropRegion, PDTile tile, void *clientData)
void PDDocPrintingTiledPage(PDDoc doc, ASInt32 page, ASStm stm, ASInt32 whichRow, ASInt32 whichColumn, ASInt32 numRows, ASInt32 numColumns, ASFixedRect *cropRegion, PDTile tile, void *clientData)
void PDDocDidPrintTiledPage(PDDoc doc, ASInt32 page, ASStm stm, ASInt32 error, ASInt32 whichTile, ASInt32 numTiles, void *clientData)
void PDPageWillPrintAnnots(PDDoc doc, ASInt32 page, ASStm stm, void *clientData)
void PDPageDidPrintAnnots(PDDoc doc, ASInt32 page, ASStm stm, void *clientData)
void PDDocDidOpen(PDDoc doc, void *clientData)
void PDDocCalculateMetadata(PDDoc doc, void *clientData)
void PDDocDidChangePageAreas(PDDoc pdDoc, ASInt32 areaMask, ASInt32 firstPage, ASInt32 lastPage, void *clientData)
void PSPrintBeforeAcrobatProcsets(PDDoc doc, ASStm stm, void *clientData)
void AVPageViewWillDraw(AVPageView pageView, void *clientData)
void AVPageViewAnnotDidPerformOp(AVPageView pageView, PDAnnot pdAnnot, AVAnnotOp annotOp, void *clientData)
void PDPageWillPrintAnnot(PDAnnot annot, ASInt32 page, void *clientData)
void PDPageDidPrintAnnot(PDAnnot annot, ASInt32 page, ASInt32 status, void *clientData)
void AVDocActivePageViewDidChange(AVDoc avDoc, AVPageView newPageView, AVPageView oldPageView, void *clientData)
void AVPageViewWasCreated(AVPageView pageView, void *clientData)
void AVPageViewWillDestroy(AVPageView pageView, void *clientData)
void AVPageViewDidChangeEx(AVPageView pageView, ASInt16 how, const AVDevRectP rect, void *clientData)
void PDBookmarkWillChangeOpenState(PDBookmark bookmark, ASBool open, void* clientData)
void PDBookmarkDidChangeOpenState(PDBookmark bookmark, ASBool open, void* clientData)
void PDOCContextWillChange(PDOCContext ocContext, PDOCContextChangeType whatWillHappen, void* objects, void *clientData)
void PDOCContextDidChange(PDOCContext ocContext, PDOCContextChangeType whatHappened, void* objects, ASErrorCode error, void *clientData)
void PDDocOCWillChange(PDDoc doc, PDDocOCChangeType whatWillHappen, void* object, void *clientData)
void PDDocOCDidChange(PDDoc doc, PDDocOCChangeType whatHappened, void* object, ASErrorCode error, void *clientData)
void PDPageDidRemoveAnnotEx(PDPage page, PDAnnot removedAnnot, ASInt32 error, void *clientData)
void PDDocWillPrintDocInMode(PDDoc doc, PDPrintWhat printMode, void *clientData)
void AVPageViewDocDidChange(AVPageView pageView, AVDoc newDoc, AVDoc oldDoc, void *clientData)
void AVDocDidClearSelection(AVDoc doc, void *clientData)
void AVDocWindowWasAdded(AVDoc doc, AVWindow window, void* clientData)
void AVDocWindowWasRemoved(AVDoc doc, AVWindow window, void* clientData)
void AVDocAVWindowDidChange(AVDoc doc, AVWindow oldWindow, AVWindow newWindow, void* clientData)
void PDNameTreeNameWillRemove(PDNameTree tree, const char *key, ASInt32 keyLen, void *clientData)
void PDDocPageDirectionDidChange(PDDoc doc, void* clientData)
void AVDocPopupContentsWillChange(AVDoc doc, PDAnnot annot, void *clientData)
void PDDocXAPMetadataDidChange(PDDoc pdDoc, ASText newMetadata, void *clientData)
void CosDictXAPMetadataDidChange(CosObj dict, ASText newMetadata, void *clientData)
void AVDocPrintDialogWasCancelled(AVDoc doc, void *clientData)
void PDDocInksDidChange(PDDoc doc, void *clientData)
void PDPageDidRedraw(PDPage page, void *clientData)
